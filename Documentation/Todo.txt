If state receives a message and can't/shouldn't process it, pass it down the stack to a state that can/should?

Queues and following waypoints/waiting for robots to move are similar behaviors. Still have separate
states, or find a way to use the Follow behavior inside a queue? Queue would just specify the next waypoint and then push the Follow onto the stack

initialize FollowState with Vector2 or list of Vector2s, then pop from followstate once we're there

For queue specifically, robot needs to move around queue to the back of line (don't get in way of first robot)

queue = move to queue staging position, then start of queue, then follow waypoints

Split Main instantiation code into different methods

Create parent Main object and override behaviors as necessary? Or split out common code like ground generation, resource placement, robot placement

put constants (robot diameter, resource size, etc) in Constants file

why use queues for waypoints...should use something else instead? want to be able to split queues. indexed arrays?

algorithm for figuring out how soon to jump off the perimeter should prioritize closer to the end? or closer to front?

document code

check queuing code (dynamic spacing isn't working so hot)

create encoder for things like Vector2, queue, etc.

make it so robots don't have to stop when checking for running into next guy

add visual indicators for queues, waypoints, etc

add visual indicator for time speedup and slowdown

add Comm.sendMessage(CommMessage msg) for queueing purposes

try 8x timescale speedup with smarter pathfinding (set calculation fidelity to "High" or whatever)

add visual indicators for errors (hook into Log._ ?) as well as notifications to the user

add filtering to log based on LogLevel